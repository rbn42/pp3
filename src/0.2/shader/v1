
			
			uniform mat4 u_worldMatrix;
			uniform mat3 u_normalMatrix;
			uniform mat4 u_viewMatrix;
			uniform mat4 u_projectMatrix;
			 
			uniform vec3 u_lightSource0;
			uniform vec3 u_lightSource1;
			uniform vec3 u_eyePosition;
			
			attribute vec3 a_normal;
			attribute vec2 a_texCoord;
			attribute vec4 a_position;
 
			varying vec2 v_texCoord; 
            varying vec3 v_normal, v_lightDir0,v_eyeVec;//, lightDir1, eyeVec;
            varying float v_diffuseFactor;
            varying vec3 v_worldPosition;

			void main()
			{
			vec4 wp= u_worldMatrix* a_position; 
		    vec3 worldPosition=wp.xyz/wp.w;
			  
			
			gl_Position = u_projectMatrix*u_viewMatrix *wp;
			
			v_lightDir0= worldPosition-u_lightSource0; 
			v_texCoord = a_texCoord;
			v_eyeVec= u_eyePosition- worldPosition;
			v_normal= u_normalMatrix *a_normal;
			//v_diffuseFactor=max(dot(v_normal, -v_lightDir0), 0.0); 
			
			 
			} 
//////////////////////////////////////////////////////////////////
			precision mediump float;
			uniform float u_lightSource0Strenth; 


			uniform sampler2D sampler2d;
 
			varying vec2 v_texCoord;
			
            varying vec3 v_normal, v_lightDir0,v_eyeVec;//, lightDir1, eyeVec;
            varying vec3 v_worldPosition;

			void main()
			{
				vec2 texCoord = vec2(v_texCoord.s, 1.0 - v_texCoord.t);
				vec4 color  = texture2D(sampler2d, texCoord);   
				vec3 n=normalize(v_normal);
				vec3 nl=normalize(v_lightDir0);
				vec3 ne=normalize(v_eyeVec);
				float diffuse=max(dot(n,-nl),0.0);
				vec3 nh=normalize(ne-nl);
				float blinn=pow(max(dot(nh,n),0.0),800.0);
				
				float pointLightStrenth=length(v_lightDir0);
				pointLightStrenth=u_lightSource0Strenth/pointLightStrenth/pointLightStrenth;
				
				color.xyz*=pointLightStrenth*(0.2+0.4*diffuse+25.7*blinn);
				gl_FragColor = color;//vec4(u_ambientColor+color.xyz * 	v_diffuseFactor, color.a); 
			}