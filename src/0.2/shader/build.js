glsl_plain=["\n\nuniform mat4 u_worldMatrix; \nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectMatrix; \n\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_position; \n\nvoid main()\n{\n    vec4 wp= u_worldMatrix* a_position;   \n    gl_Position = u_projectMatrix*u_viewMatrix *wp; \n} \n///////////////////////","///////////////////////////////////////////\nprecision mediump float; \n\nuniform vec4 u_color; \nvoid main()\n{ \n    vec4 color=vec4(1.0,1.0,1.0,.4);\n    gl_FragColor = u_color; \n}\n"];
glsl_main=["\n\nuniform mat4 u_worldMatrix;\nuniform mat3 u_normalMatrix;\nuniform mat3 u_viewNormalMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectMatrix;\n\nuniform vec3 u_lightSource0;\nuniform vec3 u_lightSource1;\nuniform vec3 u_eyePosition;\n\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_position;\n\nvarying vec2 v_texCoord; \nvarying vec3 v_normal, v_lightDir0,v_eyeVec, v_lightDir1;//, eyeVec;\nvarying float v_diffuseFactor;\nvarying vec3 v_worldPosition;\nvarying vec3 v_viewPosition;\nvarying vec3 v_worldNormal;\nvarying vec3 v_viewNormal;\n\nvoid main()\n{\n    vec4 wp= u_worldMatrix* a_position; \n    // vec3 worldPosition=wp.xyz/wp.w;\n    vec4 vp=u_viewMatrix * wp;\n    // vec3 viewPosition=vp.xyz/vp.w;\n    v_worldPosition=wp.xyz/wp.w;\n    v_viewPosition=vp.xyz/vp.w;\n\n    v_worldNormal= u_normalMatrix *a_normal;\n    v_viewNormal=u_viewNormalMatrix*v_worldNormal;\n    gl_Position = u_projectMatrix*vp;\n\n    v_lightDir0= v_worldPosition-u_lightSource0; \n //   v_lightDir1= v_worldPosition-u_lightSource1; \n    v_texCoord = a_texCoord;\n    v_eyeVec= u_eyePosition- v_worldPosition;\n    v_normal= u_normalMatrix *a_normal;\n    //v_diffuseFactor=max(dot(v_normal, -v_lightDir0), 0.0); \n\n\n} \n///////////////////////","///////////////////////////////////////////\nprecision mediump float;\nuniform float u_lightSource0Strenth; \n\n\nuniform sampler2D sampler2d;\n\nvarying vec2 v_texCoord;\n\nvarying vec3 v_normal, v_lightDir0, v_lightDir1,v_eyeVec;//, lightDir1, eyeVec;\nvarying vec3 v_worldPosition;\nvarying vec3 v_viewPosition;\nvarying vec3 v_worldNormal;\nvarying vec3 v_viewNormal;\n\nfloat constantAttenuation=1.5; \nfloat		linearAttenuation=0.5 ;\nfloat quadraticAttenuation=0.1;\nvec3		lightColor=vec3(1.,1.,1.);\nfloat		lightIntensity=1.0;  \n\nuniform float u_arealight2Width; \nuniform float u_arealight2Height; \nuniform vec3 u_arealight2ViewPosition; \nuniform vec3 u_arealight2ViewNormal; \nuniform vec3 u_arealight2ViewRight; \nuniform vec3 u_arealight2ViewUp;  \nuniform float u_arealight2Shininess;//=3399.0;\n\nuniform float u_arealight1Width; \nuniform float u_arealight1Height; \nuniform vec3 u_arealight1ViewPosition; \nuniform vec3 u_arealight1ViewNormal; \nuniform vec3 u_arealight1ViewRight; \nuniform vec3 u_arealight1ViewUp;  \nuniform float u_arealight1Shininess;//=3399.0;\n\nvec3 projectOnPlane( vec3 point1, vec3 planeCenter, vec3 planeNorm ) { \n    return point1 - dot( point1 - planeCenter, planeNorm ) * planeNorm; \n}\n\nvec3 linePlaneIntersect( vec3 lp, vec3 lv, vec3 pc, vec3 pn ) { \n    return lp + lv * ( dot( pn, pc - lp ) / dot( pn, lv ) ); \n}\nfloat calculateAttenuation( float dist ) { \n    return ( 1.0 / ( constantAttenuation + linearAttenuation * dist + quadraticAttenuation * dist * dist ) ); \n} \nvoid main()\n{\n    //area light/////////////\n    vec3 viewNormal=normalize(v_viewNormal);\n    vec3 viewPosition=v_viewPosition;\n    \n /*   {  \n    }*/\n    vec3 areaLight1= vec3(.0,.0,.0); \n    {\n        float w=u_arealight1Width/2.0;\n        float h=u_arealight1Height/2.0;\n        vec3 proj=projectOnPlane(viewPosition,u_arealight1ViewPosition,u_arealight1ViewNormal);\n        vec3 dir=proj-viewPosition;\n        vec2 diagonal=vec2(dot(dir,u_arealight1ViewRight),dot(dir,u_arealight1ViewUp));\n        vec2 nearest2D=vec2(clamp(diagonal.x,-w,w),clamp(diagonal.y,-h,h));\n        vec3 nearestPointInside=u_arealight1ViewPosition+u_arealight1ViewRight*nearest2D.x+u_arealight1ViewUp*nearest2D.y;\n\n        vec3 lightDir = normalize( nearestPointInside - viewPosition ); \n        float NdotL = max( dot( u_arealight1ViewNormal, -lightDir ), .0 ); \n        float NdotL2 = max( dot( viewNormal, lightDir ), .0 ); \n        NdotL=dot( u_arealight1ViewNormal, viewPosition -u_arealight1ViewPosition ) ;\n        if ( NdotL2 * NdotL >.0){ \n            float t=sqrt( NdotL * NdotL2 ); \n            float diffuse=t; \n            float specular=.0;\n            vec3 R = reflect( normalize( -viewPosition ), viewNormal ); \n\n            float specAngle = dot( R, u_arealight1ViewNormal ); \n            if ( specAngle > 0.0 ) {\n                vec3 E = linePlaneIntersect( viewPosition, R, u_arealight1ViewPosition , u_arealight1ViewNormal ); \n                vec3 dirSpec = E - vec3( u_arealight1ViewPosition ); \n                vec2 dirSpec2D = vec2( dot( dirSpec, u_arealight1ViewRight ), dot( dirSpec, u_arealight1ViewUp ) );\n                vec2 nearestSpec2D = vec2( clamp( dirSpec2D.x, -w, w ), clamp( dirSpec2D.y, -h, h ) );\n                float specFactor = 1.0 - clamp( length( nearestSpec2D - dirSpec2D )\n                * 0.05 * u_arealight1Shininess, 0.0, 1.0 );\n                specular = specFactor * specAngle * diffuse; \n            } \n\n            vec4 color = texture2D(sampler2d, v_texCoord);  \n            areaLight1= color.xyz* (  .4 * diffuse + .4* specular ); \n        } else{  \n        }\n    }\n    vec3 areaLight2= vec3(.0,.0,.0); \n    {\n        float w=u_arealight2Width/2.0;\n        float h=u_arealight2Height/2.0;\n        vec3 proj=projectOnPlane(viewPosition,u_arealight2ViewPosition,u_arealight2ViewNormal); \n        vec3 dir=proj-viewPosition;\n        vec2 diagonal=vec2(dot(dir,u_arealight2ViewRight),dot(dir,u_arealight2ViewUp));\n        vec2 nearest2D=vec2(clamp(diagonal.x,-w,w),clamp(diagonal.y,-h,h)); \n        \n        vec3 nearestPointInside=u_arealight2ViewPosition+u_arealight2ViewRight*nearest2D.x+u_arealight2ViewUp*nearest2D.y;\n\n        vec3 lightDir = normalize( nearestPointInside - viewPosition ); \n        float NdotL = max( dot( u_arealight2ViewNormal, -lightDir ), .0 ); \n        float NdotL2 = max( dot( viewNormal, lightDir ), .0 ); \n        NdotL=dot( u_arealight2ViewNormal, viewPosition -u_arealight2ViewPosition ) ;\n        if ( NdotL2 * NdotL >.0){ \n            float t=sqrt( NdotL * NdotL2 ); \n            float diffuse=t; \n            float specular=.0;\n            vec3 R = reflect( normalize( -viewPosition ), viewNormal ); \n\n            float specAngle = dot( R, u_arealight2ViewNormal ); \n            if ( specAngle > 0.0 ) {\n                vec3 E = linePlaneIntersect( viewPosition, R, u_arealight2ViewPosition , u_arealight2ViewNormal ); \n                vec3 dirSpec = E - vec3( u_arealight2ViewPosition ); \n                vec2 dirSpec2D = vec2( dot( dirSpec, u_arealight2ViewRight ), dot( dirSpec, u_arealight2ViewUp ) );\n                vec2 nearestSpec2D = vec2( clamp( dirSpec2D.x, -w, w ), clamp( dirSpec2D.y, -h, h ) );\n                float specFactor = 1.0 - clamp( length( nearestSpec2D - dirSpec2D )\n                * 0.05 * u_arealight2Shininess, 0.0, 1.0 );\n                specular = specFactor * specAngle * diffuse; \n            } \n\n            vec4 color = texture2D(sampler2d, v_texCoord);  \n           areaLight2= color.xyz* (  .4 * diffuse + .4* specular ); \n        } else{  \n        }\n    }\n    // point light ///////////////////////////////////////\n    vec2 texCoord = vec2(v_texCoord.s, 1.0 - v_texCoord.t);\n    vec3 n=normalize(v_normal);\n    vec3 nl=normalize(v_lightDir0);\n    vec3 ne=normalize(v_eyeVec);\n    float diffuse=max(dot(n,-nl),0.0);\n    vec3 nh=normalize(ne-nl);\n    float blinn=pow(max(dot(nh,n),0.0),800.0);\n\n    float pointLightStrenth=length(v_lightDir0);\n    pointLightStrenth=.01/pointLightStrenth/pointLightStrenth;\n pointLightStrenth=.3;\n    vec4 color = texture2D(sampler2d, texCoord); \n//    color.xyz*=.4;\n     color.xyz*=(0.2+0.4*diffuse*pointLightStrenth+.4*blinn*pointLightStrenth); \n     color.xyz+=(areaLight1+areaLight2)*1.5;\n    gl_FragColor = color;//vec4(u_ambientColor+color.xyz * 	v_diffuseFactor, color.a); \n}\n\n"];
glsl_plain_texture=["\n\nuniform mat4 u_worldMatrix; \nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectMatrix; \n\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_position; \nvarying vec2 v_texCoord;\n\nvoid main()\n{ \n    gl_Position = u_projectMatrix*u_viewMatrix * u_worldMatrix* a_position; \n    v_texCoord = a_texCoord;\n} \n///////////////////////","///////////////////////////////////////////\nprecision mediump float; \n\nuniform sampler2D sampler2d;  \nvarying vec2 v_texCoord;\nvoid main()\n{   \n    vec4 color = texture2D(sampler2d, v_texCoord); \n    gl_FragColor = color; \n}\n"];
