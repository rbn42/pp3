glsl_plain=["\n\nuniform mat4 u_worldMatrix; \nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectMatrix; \n\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_position; \n\nvoid main()\n{\n    vec4 wp= u_worldMatrix* a_position;   \n    gl_Position = u_projectMatrix*u_viewMatrix *wp; \n} \n///////////////////////","///////////////////////////////////////////\nprecision mediump float; \n\nuniform vec4 u_color; \nvoid main()\n{ \n    vec4 color=vec4(1.0,1.0,1.0,.4);\n    gl_FragColor = u_color; \n}\n"];
glsl_main=["\n\nuniform mat4 u_worldMatrix;\nuniform mat3 u_normalMatrix;\nuniform mat3 u_viewNormalMatrix;\nuniform mat4 u_viewMatrix;\nuniform mat4 u_projectMatrix;\n\nuniform vec3 u_lightSource0;\nuniform vec3 u_lightSource1;\nuniform vec3 u_eyePosition;\n\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_position;\n\nvarying vec2 v_texCoord; \nvarying vec3 v_normal, v_lightDir0,v_eyeVec;//, lightDir1, eyeVec;\nvarying float v_diffuseFactor;\nvarying vec3 v_worldPosition;\nvarying vec3 v_viewPosition;\nvarying vec3 v_worldNormal;\nvarying vec3 v_viewNormal;\n\nvoid main()\n{\n    vec4 wp= u_worldMatrix* a_position; \n    // vec3 worldPosition=wp.xyz/wp.w;\n    vec4 vp=u_viewMatrix * wp;\n    // vec3 viewPosition=vp.xyz/vp.w;\n    v_worldPosition=wp.xyz/wp.w;\n    v_viewPosition=vp.xyz/vp.w;\n\n    v_worldNormal= u_normalMatrix *a_normal;\n    v_viewNormal=u_viewNormalMatrix*v_worldNormal;\n    gl_Position = u_projectMatrix*vp;\n\n    v_lightDir0= v_worldPosition-u_lightSource0; \n    v_texCoord = a_texCoord;\n    v_eyeVec= u_eyePosition- v_worldPosition;\n    v_normal= u_normalMatrix *a_normal;\n    //v_diffuseFactor=max(dot(v_normal, -v_lightDir0), 0.0); \n\n\n} \n///////////////////////","///////////////////////////////////////////\nprecision mediump float;\nuniform float u_lightSource0Strenth; \n\n\nuniform sampler2D sampler2d;\n\nvarying vec2 v_texCoord;\n\nvarying vec3 v_normal, v_lightDir0,v_eyeVec;//, lightDir1, eyeVec;\nvarying vec3 v_worldPosition;\nvarying vec3 v_viewPosition;\nvarying vec3 v_worldNormal;\nvarying vec3 v_viewNormal;\n\nfloat constantAttenuation=1.5; \nfloat		linearAttenuation=0.5 ;\nfloat quadraticAttenuation=0.1;\nvec3		lightColor=vec3(1.,1.,1.);\nfloat		lightIntensity=1.0; \nuniform float u_shininess;//=3399.0;\n\nuniform float u_lightWidth;//=.2;\nuniform float u_lightHeight;//k=0.2;\nuniform vec3 u_lightViewPosition;//=vec3(.0,.0,.0);\nuniform vec3 u_lightViewNormal;//=vec3(.0,.0,1.);\nuniform vec3 u_lightViewRight;//=vec3(1.,.0,.0);\nuniform vec3 u_lightViewUp;//=vec3(.0,1.,.0);\n\nvec3 projectOnPlane( vec3 point1, vec3 planeCenter, vec3 planeNorm ) { \n    return point1 - dot( point1 - planeCenter, planeNorm ) * planeNorm; \n}\n\nvec3 linePlaneIntersect( vec3 lp, vec3 lv, vec3 pc, vec3 pn ) { \n    return lp + lv * ( dot( pn, pc - lp ) / dot( pn, lv ) ); \n}\nfloat calculateAttenuation( float dist ) { \n    return ( 1.0 / ( constantAttenuation + linearAttenuation * dist + quadraticAttenuation * dist * dist ) ); \n} \nvoid main()\n{\n    //area light/////////////\n    vec3 viewNormal=normalize(v_viewNormal);\n    vec3 viewPosition=v_viewPosition;\n    float w=u_lightWidth/2.0;\n    float h=u_lightHeight/2.0;\n    vec3 proj=projectOnPlane(viewPosition,u_lightViewPosition,u_lightViewNormal);\n    vec3 dir=proj-viewPosition;\n    vec2 diagonal=vec2(dot(dir,u_lightViewRight),dot(dir,u_lightViewUp));\n    vec2 nearest2D=vec2(clamp(diagonal.x,-w,w),clamp(diagonal.y,-h,h));\n    vec3 nearestPointInside=u_lightViewPosition+u_lightViewRight*nearest2D.x+u_lightViewUp*nearest2D.y;\n\n    vec3 lightDir = normalize( nearestPointInside - viewPosition ); \n    float NdotL = max( dot( u_lightViewNormal, -lightDir ), .0 ); \n    float NdotL2 = max( dot( viewNormal, lightDir ), .0 ); \n    NdotL=dot( u_lightViewNormal, viewPosition -u_lightViewPosition ) ;\n    vec3 areaLight;\n    if ( NdotL2 * NdotL >.0){ \n        float t=sqrt( NdotL * NdotL2 );\n        //jvec3 diffuse = vec3( t ,t ,t );\n        float diffuse=t;\n        // j vec3 specular = vec3( .0,.0,.0 ); \n        float specular=.0;\n        vec3 R = reflect( normalize( -viewPosition ), viewNormal ); \n\n        float specAngle = dot( R, u_lightViewNormal ); \n        if ( specAngle > 0.0 ) {\n            vec3 E = linePlaneIntersect( viewPosition, R, u_lightViewPosition , u_lightViewNormal ); \n            vec3 dirSpec = E - vec3( u_lightViewPosition ); \n            vec2 dirSpec2D = vec2( dot( dirSpec, u_lightViewRight ), dot( dirSpec, u_lightViewUp ) );\n            vec2 nearestSpec2D = vec2( clamp( dirSpec2D.x, -w, w ), clamp( dirSpec2D.y, -h, h ) );\n            float specFactor = 1.0 - clamp( length( nearestSpec2D - dirSpec2D )\n            * 0.05 * u_shininess, 0.0, 1.0 );\n            specular = specFactor * specAngle * diffuse; \n        } \n\n        vec4 color = texture2D(sampler2d, v_texCoord); \n        //gl_FragColor= vec4( color.xyz* ( .2+ .4 * diffuse + .4* specular ), 1.);//attenuation ); \n        areaLight= color.xyz* (  .4 * diffuse + .4* specular );//, 1.);//attenuation ); \n    } else{\n        // return float4(lightColor*.2,1); \n        //gl_FragColor=vec4(1.,0.,0.,1.); \n        areaLight= vec3(.0,.0,.0);//color.xyz* ( .2+ .4 * diffuse + .4* specular );//, 1.);//attenuation ); \n    }\n    // point light ///////////////////////////////////////\n    vec2 texCoord = vec2(v_texCoord.s, 1.0 - v_texCoord.t);\n    vec4 color = texture2D(sampler2d, texCoord); \n    vec3 n=normalize(v_normal);\n    vec3 nl=normalize(v_lightDir0);\n    vec3 ne=normalize(v_eyeVec);\n    float diffuse=max(dot(n,-nl),0.0);\n    vec3 nh=normalize(ne-nl);\n    float blinn=pow(max(dot(nh,n),0.0),800.0);\n\n    float pointLightStrenth=length(v_lightDir0);\n    pointLightStrenth=u_lightSource0Strenth/pointLightStrenth/pointLightStrenth;\n\n    //color.xyz*=pointLightStrenth*(0.2+0.4*diffuse+25.7*blinn);\n    // color.y=.0;\n    color.xyz*=(0.2+0.4*diffuse+.4*blinn);\n    color.xyz+=areaLight;\n    gl_FragColor = color;//vec4(u_ambientColor+color.xyz * 	v_diffuseFactor, color.a); \n}\n\n"];
